rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is a member of a specific group
    function isGroupMember(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds.hasAny([request.auth.uid]);
    }
    
    match /users/{userId} {
      // A user can always read and write their own document.
      allow read, write: if request.auth.uid == userId;
      // Any authenticated user can read other user profiles. This is a simplification
      // to avoid complex/slow rules. For higher security, a Cloud Function would handle this.
      allow read: if isAuthenticated();
    }

    match /groups/{groupId} {
      // Anyone can see the list of groups
      allow list;
      // Authenticated users who are members of the group can read group details.
      // Anyone can read a group to see its name on the join page.
      allow read: if isAuthenticated();
      
      // Any authenticated user can create a group. The user creating it is the first member.
      allow create: if isAuthenticated() && request.resource.data.memberIds[0] == request.auth.uid;
      
      // A user can join a group (update memberIds array).
      allow update: if isAuthenticated() && request.resource.data.memberIds.hasAny([request.auth.uid]);
    }
    
    match /workouts/{workoutId} {
        // A user can read their own workouts.
        allow read, create: if request.auth.uid == request.resource.data.userId;

        // A user can see workouts if they are in the same group.
        // This relies on the client fetching workouts only for users in their group.
        allow read: if isAuthenticated() && 
                      exists(/databases/$(database)/documents/groups) &&
                      firestore.get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds.hasAny([request.auth.uid]);

    }
  }
}